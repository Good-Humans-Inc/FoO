import Foundation
import FirebaseFunctions

class ReportGenerationService {
    
    private lazy var functions = Functions.functions()
    private let userProfileService = UserProfileService()
    
    enum ReportError: Error {
        case failedToGenerateReport(description: String)
    }
    
    /// Calls the 'generate_report' Cloud Function to get a weekly summary.
    /// - Parameter foodItems: An array of `FoodItem` to be analyzed.
    /// - Returns: The report string generated by the function.
    func generateReport(for foodItems: [FoodItem]) async throws -> String {
        do {
            // Filter for items that are confirmed to be food and have a valid name.
            let foodNames = foodItems
                .filter { $0.isFood == true && $0.name != nil && $0.name != "???" && $0.name != "N/A" }
                .map { $0.name! } // We can safely unwrap name here because of the filter.
            
            // If there are no food items, we don't need to call the function.
            guard !foodNames.isEmpty else {
                return "No food history to report on this week. Try snapping some photos of what you eat!"
            }
            
            // Load the user's profile to personalize the report.
            let profile = userProfileService.loadProfile()
            var userProfilePayload: [String: Any]?
            if let profile = profile {
                userProfilePayload = [
                    "name": profile.name,
                    "age": profile.age,
                    "pronoun": profile.pronoun,
                    "goals": profile.goals
                ]
            }
            
            // Prepare the payload for the cloud function.
            let payload: [String: Any] = [
                "food_names": foodNames,
                "user_profile": userProfilePayload ?? [:] // Send empty dict if no profile
            ]
            
            // Call the function with the payload and await its result.
            let result = try await functions.httpsCallable("generate_report").call(payload)
            
            // The report text is returned directly in the 'data' field of the response.
            if let reportText = result.data as? String {
                return reportText
            } else {
                throw ReportError.failedToGenerateReport(description: "Invalid response format from server.")
            }
            
        } catch {
            print("‚ùå ReportGenerationService: Error calling Cloud Function: \(error.localizedDescription)")
            throw ReportError.failedToGenerateReport(description: error.localizedDescription)
        }
    }
} 