import Foundation
import FirebaseFunctions

class ReportGenerationService {
    
    private lazy var functions = Functions.functions()
    
    enum ReportError: Error {
        case failedToGenerateReport(description: String)
    }
    
    /// Calls the 'generate_report' Cloud Function to get a weekly summary.
    /// - Parameter foodItems: An array of `FoodItem` to be analyzed.
    /// - Returns: The report string generated by the function.
    func generateReport(for foodItems: [FoodItem]) async throws -> String {
        do {
            // We need to convert our Swift `FoodItem` array into a dictionary
            // that matches the structure the Cloud Function expects.
            let foodItemPayload = foodItems.map { item in
                return ["name": item.name ?? "Unknown", "nutrition": item.nutrition ?? ""]
            }
            
            let data = ["foodItems": foodItemPayload]
            
            // Call the function and await its result.
            let result = try await functions.httpsCallable("generate_report").call(data)
            
            // The report text is returned directly in the 'data' field of the response.
            if let reportText = result.data as? String {
                return reportText
            } else {
                throw ReportError.failedToGenerateReport(description: "Invalid response format from server.")
            }
            
        } catch {
            print("‚ùå ReportGenerationService: Error calling Cloud Function: \(error.localizedDescription)")
            throw ReportError.failedToGenerateReport(description: error.localizedDescription)
        }
    }
} 